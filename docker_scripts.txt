--------------docker installation-------------

get.docker.com

#copy paste 
curl -fsSL get.docker.com -o get-docker.sh

#run
sh get-docker.sh

#start docker 
systemctl start docker

#add permission to the user by adding it to the group named docker
sudo usermod -aG docker slayerm

(slayerm is the user name) 

# install docker machine
go the docker install doc for docker machine and follow the linux steps
#check install 
docker-machine version

#install docker container
go to github.com/docker/container

click releases the follow the instructions to install latest version of the docker container

#check install
docker-container version

------------------to clone a git-----------------------

mkdir codes

cd codes

git clone https://github.com/BretFisher/udemy-docker-mastery.git

to update the changes 

cd  codes/udemy-docker-mastery

git pull

-------------------docker commands----------------------

docker version -> list the version of client and server

docker info -> list more info

docker -> list all the commands

docker container run -> followed by commands to run in the docker 

------------------docker container commands----------------------------

container runs images

sample:

docker container run --publish 80:80 nginx

# to run in background
docker container run --publish 80:80 --detach nginx

#list only running container
docker container ls

get container id
690682539123092

#to stop the container use first three integer of container id
docker container stop 690

#to list all the container 
docker contianer ls -a

# container name gets randomly generated by list scientists names 
# we can also specify the name
# samle name the nginx as webhost
docker container run --publish 80:80 --detach --name webhost nginx

docker contianer ls

# to see the logs
docker container logs webhost


# to remove containers 
docker container rm 690 234 345

# to force remove all containers including running

docker container rm -f 690 234 345


------------------ containers vs VMs -----------------------------

container is not like though people compare it with VMs i more like process running in host machine

example: lets run a mongodb

docker container run --detach --name mongo mongo

monog container is a process of host operating system but inside the container there will be mongo related process running in it, 
these mongo process can be listed using docker contianer commands as well as unix ps aux commands.

# to list the process using docker container command
docker container top mongo

UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD
polkitd             17534               17519               0                   15:01               ?                   00:00:02            mongod --bind_ip_all

# find same process using "ps aux" unix command

polkitd  17534  0.8  2.6 1090632 49648 ?       Ssl  15:01   0:03 mongod --bind_ip_all

thought the process is within the container the host system is one which runs the process.

if we kill the process pid from unix command the process will be stopped 

sample : kill -9 17534

now if we list the process from both the container as well as unix the mongo process wont be listed.

# to restart the stopped container we can start the process directly from docker container using its name

docker container start mongo

if we use the initial "docker container run --detach mongo" command it will create another container instead to starting the existing one which is stopped.

-------------- assignment 1 ---------------------------

for reference -> docks.docker.com  and --help

#mysql with random password enabled to check the password we need check the log.
docker container run --publish 3306:3306 --detach --name mysql --env MYSQL_RANDOM_ROOT_PASSWORD=yes mysql

# getting randmo password for mysql
docker container logs mysql | grep GENERATED

Warning: Unable to load '/usr/share/zoneinfo/zone1970.tab' as time zone. Skipping it.
GENERATED ROOT PASSWORD: ne9aeKaim0hooloh5ahng8ahshai7eeB

# to get inside mysql database
docker container exec -it con_mysql mysql -h127.0.0.1 -P3306 -uroot -p
enter password :ne9aeKaim0hooloh5ahng8ahshai7eeB


# to run httpd and nginx

docker container run --publish 80:80 --detach --name webhost nginx

docker container run --publish 8080:80 --detach --name apache_server httpd


# stop and remover all the container check with ls before and after

[slayerm@localhost ~]$ docker container ls
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                               NAMES
dc1cad4361b0        httpd               "httpd-foreground"       21 seconds ago       Up 20 seconds       0.0.0.0:8080->80/tcp                apache_server
829d7748b75b        nginx               "nginx -g 'daemon of…"   About a minute ago   Up About a minute   0.0.0.0:80->80/tcp                  webhost
ae24af5604f0        mysql               "docker-entrypoint.s…"   20 minutes ago       Up 20 minutes       0.0.0.0:3306->3306/tcp, 33060/tcp   con_mysql
[slayerm@localhost ~]$ docker container stop con_mysql webhost apache_server
con_mysql
webhost
apache_server
[slayerm@localhost ~]$ docker container ls
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
[slayerm@localhost ~]$ docker container ls -a
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS                      PORTS               NAMES
dc1cad4361b0        httpd               "httpd-foreground"       About a minute ago   Exited (0) 11 seconds ago                       apache_server
829d7748b75b        nginx               "nginx -g 'daemon of…"   2 minutes ago        Exited (0) 11 seconds ago                       webhost
ae24af5604f0        mysql               "docker-entrypoint.s…"   21 minutes ago       Exited (0) 9 seconds ago                        con_mysql
[slayerm@localhost ~]$ docker container rm con_mysql webhost apache_server
con_mysql
webhost
apache_server
[slayerm@localhost ~]$ docker container ls -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
[slayerm@localhost ~]$

